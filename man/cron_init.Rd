% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cron_funs.R
\name{cron_init}
\alias{cron_init}
\alias{cron_start}
\title{Create and start the cron on the launcher function}
\usage{
cron_init(dir_cron, head_rows = NULL)

cron_start(dir_cron, dir_conf, max_runs, cmd = NULL,
  create_file = FALSE, head_rows = NULL, ...)
}
\arguments{
\item{dir_cron}{\code{character}. Where to create the new directory.}

\item{head_rows}{\code{character} (NULL). Custom head rows to replace the default ones.}

\item{dir_conf}{\code{character}. launcher arg : where to find the tasks directorys.}

\item{max_runs}{\code{integer}. launcher arg : maximum number of simultaneous running tasks.}

\item{cmd}{\code{character} (NULL). Custom batch command to replace the default one.}

\item{create_file}{\code{boolean} (FALSE). Whether or not to create the cron_script before to launch it.}

\item{...}{\code{}. Additional arguments passed to \code{\link[cronR]{cron_add}} (Linux) or \code{\link[taskscheduleR]{taskscheduler_create}} (Windows).}
}
\value{
NULL.
}
\description{
Create and start the cron on the launcher function
}
\details{
Default cron name for both os is "cron_script". To remove a cron, use cron_rm(id = "") on Linux and taskscheduler_delete(taskname = "") on Windows.
}
\examples{
\dontrun{\donttest{

# create example of files to be called by the cron 
# (this fun is called in cron_start)
cron_init(dir_cron = tempdir(),
          head_rows = NULL)
read.delim(paste0(tempdir(), "/cron_script.R"), header = F)

cron_init(dir_cron = tempdir(),
          head_rows = c("My_head_row_1", "My_head_row_2"))
read.delim(paste0(tempdir(), "/cron_script.R"), header = F)


# start a cron
# create confs to check that it works on it

# create temporary directory for conf
dir_conf <- paste0(tempdir(), "/conf/")
dir.create(dir_conf, recursive = T)

# create temporary directory for fun
dir_fun <- paste0(tempdir(), "/fun")
dir.create(dir_fun)
con <- file(paste0(dir_fun, "/fun_script.R"))
writeLines(c("my_fun <- function(x, y, z) {",
             "  res <- x + y ;",
             "  message('Running !') ;",
             "  res",
             "}"),
           con)
close(con)

# create 2 confs
conf_1 <- configure_task(dir_path = dir_conf,
                         conf_descr = list(title_1 = "my_title_1",
                                           description_1 = "my_descr_1"),
                         fun_path = paste0(dir_fun, "/fun_script.R"),
                         fun_name = "my_fun",
                         fun_args = list(x = 0,
                                         y = 0:4,
                                         z = iris),
                         priority = 1)
conf_2 <- configure_task(dir_path = dir_conf,
                         conf_descr = list(title_2 = "my_title_2",
                                           description_2 = "my_descr_2"),
                         fun_path = paste0(dir_fun, "/fun_script.R"),
                         fun_name = "my_fun",
                         fun_args = list(x = 1,
                                         y = 0:4,
                                         z = iris),
                         priority = 2)

# on LINUX
require(cronR)
cron_start(dir_cron = tempdir(),
           dir_conf = dir_conf,
           max_runs = 1,
           cmd = NULL,
           create_file = T,
           head_rows = NULL,
           frequency = "minutely",
           id = "cron_script_ex")
           
cron_ls() # display running crons

# wait up to 1 min for conf_2 and up to 2 mins for conf_1
yaml::read_yaml(paste0(conf_1$dir, "/conf.yml"))$run_info$status
yaml::read_yaml(paste0(conf_2$dir, "/conf.yml"))$run_info$status

cron_rm(id = "cron_script_ex") # kill all running crons

# on WINDOWS
require(taskscheduleR)
cron_start(dir_cron = tempdir(),
           dir_conf = dir_conf,
           max_runs = 1,
           create_file = T,
           head_rows = NULL,
           schedule = "MINUTE",
           taskname = "cron_script_ex")
           
taskscheduler_ls() # display running crons (lots of info)

# wait up to 1 min for conf_2 and up to 2 mins for conf_1
yaml::read_yaml(paste0(conf_1$dir, "/conf.yml"))$run_info$status
yaml::read_yaml(paste0(conf_2$dir, "/conf.yml"))$run_info$status

taskscheduler_delete("cron_script_ex") # kill specified running cron

}}

}
