% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/module_configure_task.R
\name{configure_task_UI}
\alias{configure_task_UI}
\title{Module to configure a task.}
\usage{
configure_task_UI(id)
}
\arguments{
\item{id}{\code{character}. shiny id to allow multiple instanciation.}
}
\value{
shiny module.
}
\description{
Module to configure a task.
}
\examples{
\dontrun{\donttest{

# create temporary directory for conf
dir_conf <- tempdir()

# create temporary directory for fun
dir_fun <- paste0(tempdir(), "/fun")
dir.create(dir_fun)
con <- file(paste0(dir_fun, "/fun_script.R"))
writeLines(c("my_fun <- function(x, y, z) {",
             "  res <- x + y ;",
             "  message('Running !') ;",
             "  res",
             "}"),
           con)
close(con)

# create and save conf
ui <- shiny::fluidPage(configure_task_UI("my_id_1"))
server <- function(input, output, session) {
  callModule(configure_task_server, "my_id_1",
             dir_path = dir_conf,
             conf_descr = list(title = "my_title",
                               description = "my_descr"),
             fun_path = paste0(dir_fun, "/fun_script.R"),
             fun_name = "my_efun",
             fun_args = list(x = 1,
                             y = 0:4,
                             z = iris),
             priority = 1)
}
shiny::shinyApp(ui = ui, server = server)

# catch results
list.files(path <- paste0(dir_conf, "/", list.files(dir_conf)[1]))
read_conf <- yaml::read_yaml(paste0(path, "/", "conf.yml"))
y <- readRDS(paste0(path, "/", "inputs/y.RDS"))
z <- readRDS(paste0(path, "/", "inputs/z.RDS"))

}}
}
