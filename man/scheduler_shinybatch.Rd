% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cron_funs.R
\name{scheduler_init}
\alias{scheduler_init}
\alias{scheduler_add}
\alias{scheduler_remove}
\alias{scheduler_ls}
\title{Scheduler management of the launcher function}
\usage{
scheduler_init(
  dir_scheduler,
  dir_conf,
  max_runs = 1,
  ignore_status = c("running", "finished", "error"),
  delay_reruns = T,
  filename = paste0("sb_", format(Sys.time(), format = "\%Y\%m\%d"), ".R"),
  head_rows = NULL
)

scheduler_add(
  dir_scheduler,
  dir_conf,
  max_runs = 1,
  ignore_status = c("running", "finished", "error"),
  delay_reruns = T,
  taskname = paste0("sb_", format(Sys.time(), format = "\%Y\%m\%d")),
  filename = paste0(taskname, ".R"),
  create_file = TRUE,
  head_rows = NULL,
  ...
)

scheduler_remove(taskname, ...)

scheduler_ls(...)
}
\arguments{
\item{dir_scheduler}{\code{character}. Where to create R scheduler script.}

\item{dir_conf}{\code{character}. launcher arg : where to find the tasks directories.}

\item{max_runs}{\code{integer} (1). launcher arg : maximum number of simultaneous running tasks.}

\item{ignore_status}{\code{character} (c("running", "finished", "error")). launcher arg : status to be ignored when launching tasks.}

\item{delay_reruns}{\code{boolean} (T). When "running", "finished" or "error" are not in ignore_status, use the date of the last run instead of
the date of creation of the task to compute the order of (re)run for these tasks. The priority still applies.}

\item{filename}{\code{character} a character string with the name of the rscript file.}

\item{head_rows}{\code{character} (NULL). Custom head rows to replace the default ones.}

\item{taskname}{\code{character} a character string with the name of the task. (id in Linux cronR, taskname in windows taskscheduleR)}

\item{create_file}{\code{boolean} (TRUE). Whether or not to also create the R scheduler script with scheduler_init ?}

\item{...}{\code{}. Additional arguments passed to \code{\link[cronR]{cron_add}}, \code{\link[cronR]{cron_rm}}, \code{\link[cronR]{cron_ls}} (Linux) or \code{\link[taskscheduleR]{taskscheduler_create}} (Windows).}
}
\value{
NULL.
}
\description{
Scheduler management of the launcher function
}
\details{
Without any frequency argument, defaut is set to every minute
}
\examples{
\dontrun{\donttest{

# create temporary directory for conf
dir_conf <- paste0(tempdir(), "/conf/")
dir.create(dir_conf, recursive = T)

# create example of files to be called by the scheduler
# (this fun is called in scheduler_add)
scheduler_init(
    dir_scheduler = tempdir(),
    dir_conf = dir_conf,
    filename = "cron_script.R",
    head_rows = NULL
 )
read.delim(paste0(tempdir(), "/cron_script.R"), header = F)

scheduler_init(dir_scheduler = tempdir(),
               dir_conf = dir_conf,
               filename = "cron_script.R",
               head_rows = c("My_head_row_1", "My_head_row_2"))
read.delim(paste0(tempdir(), "/cron_script.R"), header = F)


# start a cron
# create confs to check that it works on it

# ex fun
fun_path = system.file("ex_fun/sb_fun_ex.R", package = "shinybatch")
fun_name = "sb_fun_ex"

# create 2 confs
conf_1 <- configure_task(dir_path = dir_conf,
                         conf_descr = list(
                           title_1 = "my_title_1",
                           description_1 = "my_descr_1"
                         ),
                         fun_path = fun_path,
                         fun_name = fun_name,
                         fun_args = list(
                           x = 0,
                           y = 0:4,
                           z = iris
                         ),
                         priority = 1)
conf_2 <- configure_task(dir_path = dir_conf,
                         conf_descr = list(
                           title_2 = "my_title_2",
                           description_2 = "my_descr_2"
                         ),
                         fun_path = fun_path,
                         fun_name = fun_name,
                         fun_args = list(
                           x = 1,
                           y = 0:4,
                           z = iris
                         ),
                         priority = 2)

# on LINUX -> Needs cronR package
# on Windows -> Needs taskscheduleR package

scheduler_add(dir_scheduler = tempdir(),
              dir_conf,
              max_runs = 1,
              ignore_status = c("running", "finished", "error"),
              delay_reruns = T,
              create_file = T,
              head_rows = NULL,
              taskname = "cron_script_ex")

scheduler_ls() # display existing crons

# wait up to 1 min for conf_2 and up to 2 mins for conf_1
yaml::read_yaml(paste0(conf_1$dir, "/conf.yml"))$run_info$status
yaml::read_yaml(paste0(conf_2$dir, "/conf.yml"))$run_info$status

scheduler_remove(taskname = "cron_script_ex") # kill selected cron

}}

}
